generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")

}

// =========================
// ENUMS
// =========================
enum QUESTION_TYPE {
  scmcq
  mcmcq
  numerical
  text
  match
  interactive
}

enum MEDIA_FILE {
  image
  video
  audio
  interactive
}

enum USER_TYPE {
  participant
  tester
  admin
}

enum ATTEMPT_STATUS {
  in_progress
  submitted
  graded
}

// =========================
// MODELS
// =========================

// USERS
model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  name      String
  password  String?
  type      USER_TYPE @default(participant)
  createdAt DateTime  @default(now())

  tests     Test[]    @relation("UserTests")
  attempts  Attempt[]
}

// TESTS
model Test {
  id                  Int       @id @default(autoincrement())
  title               String
  description         String?
  createdBy           Int?
  createdAt           DateTime  @default(now())
  isActive            Boolean   @default(true)
  duration            String?   
  allowNegativeMarking Boolean   @default(false)
  allowPartialMarking  Boolean   @default(false)
  shuffleQuestions    Boolean   @default(false)
  shuffleOptions      Boolean   @default(false)

  createdByUser       User?     @relation("UserTests", fields: [createdBy], references: [id], onDelete: SetNull)
  sections            Section[]
  attempts            Attempt[]

  @@index([createdBy])
  @@index([isActive])
  @@index([createdAt])
}

// SECTIONS
model Section {
  id          Int       @id @default(autoincrement())
  testId      Int
  title       String
  description String?
  orderIndex  Int
  duration    String?   
  createdAt   DateTime  @default(now())

  test        Test      @relation(fields: [testId], references: [id], onDelete: Cascade)
  questions   Question[]
}

// QUESTIONS
model Question {
  id             Int            @id @default(autoincrement())
  sectionId      Int
  text           String
  type           QUESTION_TYPE
  ans            String?
  maxScore       Decimal        @default(1.0)
  negativeScore  Decimal        @default(0.0)
  partialMarking Boolean        @default(false)
  createdAt      DateTime       @default(now())

  section        Section        @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  options        Option[]
  mediaLinks     QuestionMedia[]
  responses      Response[]
}

// OPTIONS
model Option {
  id          Int           @id @default(autoincrement())
  questionId  Int
  text        String?
  weight      Decimal       @default(0.0)
  isCorrect   Boolean       @default(false)

  question    Question      @relation(fields: [questionId], references: [id], onDelete: Cascade)
  mediaLinks  OptionMedia[]
}

// MEDIA
model Media {
  id       Int           @id @default(autoincrement())
  filename String
  label    String?
  type     MEDIA_FILE

  questionLinks QuestionMedia[]
  optionLinks   OptionMedia[]
}

// QUESTION_MEDIA (many-to-many)
model QuestionMedia {
  questionId Int
  mediaId    Int

  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  media      Media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@id([questionId, mediaId])
}

// OPTION_MEDIA (many-to-many)
model OptionMedia {
  optionId Int
  mediaId  Int

  option   Option @relation(fields: [optionId], references: [id], onDelete: Cascade)
  media    Media  @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@id([optionId, mediaId])
}

// ATTEMPTS
model Attempt {
  id          Int       @id @default(autoincrement())
  testId      Int
  userId      Int
  startedAt   DateTime  @default(now())
  submittedAt DateTime?
  totalScore  Decimal?
  status      ATTEMPT_STATUS @default(in_progress)

  test        Test      @relation(fields: [testId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  responses   Response[]

  @@index([testId, userId])
  @@index([status])
}

// RESPONSES
model Response {
  id                Int       @id @default(autoincrement())
  attemptId         Int
  questionId        Int
  selectedOptionIds Int[]    
  answerText        String?
  score             Decimal?
  evaluated         Boolean?  @default(false)

  attempt           Attempt   @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question          Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([attemptId, questionId])
}

// INTERACTIVE FILES
model InteractiveFile {
  id        Int      @id @default(autoincrement())
  filename  String
  label     String
  version   String?
  url       String   @unique
  createdAt DateTime @default(now())
}
